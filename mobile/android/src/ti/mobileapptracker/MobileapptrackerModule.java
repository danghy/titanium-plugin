/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2013 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package ti.mobileapptracker;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.titanium.TiApplication;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import com.mobileapptracker.MATDeeplinkListener;
import com.mobileapptracker.MATEvent;
import com.mobileapptracker.MATEventItem;
import com.mobileapptracker.MATGender;
import com.mobileapptracker.MobileAppTracker;

@Kroll.module(name="Mobileapptracker", id="ti.mobileapptracker")
public class MobileapptrackerModule extends KrollModule {    
    private static MobileAppTracker mat = null;
    
    public MobileapptrackerModule() {
        super();
    }
    
    @Kroll.onAppCreate
    public static void onAppCreate(TiApplication app) {
        // put module init code that needs to run when the application is created
    }
    
    @Kroll.method
    public void initTracker(String advId, String convKey) {
        mat = MobileAppTracker.init(getActivity(), advId, convKey);
        mat.setPluginName("titanium");
    }
    
    @Kroll.method
    public void measureSession() {
        mat.measureSession();
    }
    
    @Kroll.method
    public void measureEventName(String eventName) {
        mat.measureEvent(eventName);
    }
    
    @Kroll.method
    public void measureEvent(KrollDict event) {
        // Convert KrollDict to MATEvent
        mat.measureEvent(convertToMATEvent(event));
    }
    
    @Kroll.method
    public void checkForDeferredDeeplink(final KrollFunction callback) {
        mat.checkForDeferredDeeplink(new MATDeeplinkListener() {
            @Override
            public void didFailDeeplink(String error) {
                HashMap<String, String> map = new HashMap<String, String>();
                map.put("error", error);
                callback.call(getKrollObject(), map);
            }

            @Override
            public void didReceiveDeeplink(String deeplink) {
                HashMap<String, String> map = new HashMap<String, String>();
                map.put("deeplink", deeplink);
                callback.call(getKrollObject(), map);
            }
        });
    }
    
    @Kroll.method
    public void setAge(int age) {
        mat.setAge(age);
    }
    
    @Kroll.method
    public void setAllowDuplicates(boolean allowDuplicates) {
        mat.setAllowDuplicates(allowDuplicates);
    }
    
    @Kroll.method
    public void setAndroidId(String androidId) {
        mat.setAndroidId(androidId);
    }
    
    @Kroll.method
    public void setAppAdTracking(boolean allowAdTracking) {
        mat.setAppAdTrackingEnabled(allowAdTracking);
    }
    
    @Kroll.method
    public void setCurrencyCode(String currencyCode) {
        mat.setCurrencyCode(currencyCode);
    }
    
    @Kroll.method
    public void setDebugMode(boolean debugMode) {
        mat.setDebugMode(debugMode);
    }
    
    @Kroll.method
    public void setExistingUser(boolean existing) {
        mat.setExistingUser(existing);
    }
    
    @Kroll.method
    public void setFacebookEventLogging(boolean enabled, boolean limitEventAndDataUsage) {
        mat.setFacebookEventLogging(enabled, getActivity(), limitEventAndDataUsage);
    }
    
    @Kroll.method
    public void setGender(MATGender gender) {
        mat.setGender(gender);
    }
    
    @Kroll.method
    public void setInstallReferrer(String referrer) {
        mat.setInstallReferrer(referrer);
    }
    
    @Kroll.method
    public void setLocation(double latitude, double longitude) {
        mat.setLatitude(latitude);
        mat.setLongitude(longitude);
    }
    
    @Kroll.method
    public void setLocationWithAltitude(double latitude, double longitude, double altitude) {
        mat.setLatitude(latitude);
        mat.setLongitude(longitude);
        mat.setAltitude(altitude);
    }
    
    @Kroll.method
    public void setPackageName(String packageName) {
        mat.setPackageName(packageName);
    }

    @Kroll.method
    public void setPayingUser(boolean paying) {
        mat.setIsPayingUser(paying);
    }
    
    @Kroll.method
    public void setSiteId(String siteId) {
        mat.setSiteId(siteId);
    }
    
    @Kroll.method
    public void setUserId(String userId) {
        mat.setUserId(userId);
    }
    
    @Kroll.method
    public void setUserEmail(String userEmail) {
        mat.setUserEmail(userEmail);
    }
    
    @Kroll.method
    public void setUserName(String userName) {
        mat.setUserName(userName);
    }

    @Kroll.method
    public void setFacebookUserId(String facebookUserId) {
        mat.setFacebookUserId(facebookUserId);
    }

    @Kroll.method
    public void setTwitterUserId(String twitterUserId) {
        mat.setTwitterUserId(twitterUserId);
    }

    @Kroll.method
    public void setGoogleUserId(String googleUserId) {
        mat.setGoogleUserId(googleUserId);
    }
    
    @Kroll.method
    public void setGoogleAdvertisingId(String adId, boolean isLATEnabled) {
        mat.setGoogleAdvertisingId(adId, isLATEnabled);
    }
    
    /////////////////////////////////
    // Getter methods
    /////////////////////////////////
    
    @Kroll.method
    public String getMatId() {
        return mat.getMatId();
    }
    
    @Kroll.method
    public String getOpenLogId() {
        return mat.getOpenLogId();
    }
    
    @Kroll.method
    public boolean getIsPayingUser() {
        return mat.getIsPayingUser();
    }
    
    /////////////////////////////////
    // Android no-op methods
    /////////////////////////////////
    
    @Kroll.method
    public void setDelegate(boolean enable) {
        // no-op
    }
    
    @Kroll.method
    public void setJailbroken(boolean isJailbroken) {
        // no-op
    }
    
    @Kroll.method
    public void setShouldAutoDetectJailbroken(boolean shouldAutoDetect) {
        // no-op
    }
    
    @Kroll.method
    public void setUseCookieTracking(boolean useCookieTracking) {
        // no-op
    }
    
    @Kroll.method
    public void setRedirectUrl(String redirectUrl) {
        // no-op
    }
    
    @Kroll.method
    public void setTRUSTeId(String tpid) {
        // no-op
    }
    
    @Kroll.method
    public void setAppleAdvertisingIdentifier(String advertiserId, boolean trackingEnabled) {
        // no-op
    }
    
    @Kroll.method
    public void setAppleVendorIdentifier(String vendorId) {
        // no-op
    }
    
    @Kroll.method
    public void setShouldAutoGenerateAppleVendorIdentifier(boolean shouldAutoGenerate) {
        // no-op
    }
    
    private MATEvent convertToMATEvent(KrollDict krollEvent) {
        if (krollEvent == null || krollEvent.isEmpty() || !krollEvent.containsKeyAndNotNull("eventName")) {
            return null;
        }
        
        // Only event name is required field
        MATEvent event = new MATEvent(krollEvent.getString("eventName"));
        if (krollEvent.containsKeyAndNotNull("revenue")) {
            event.withRevenue(krollEvent.getDouble("revenue"));
        }
        if (krollEvent.containsKeyAndNotNull("currencyCode")) {
            event.withCurrencyCode(krollEvent.getString("currencyCode"));
        }
        if (krollEvent.containsKeyAndNotNull("advertiserRefId")) {
            event.withAdvertiserRefId(krollEvent.getString("advertiserRefId"));
        }
        if (krollEvent.containsKeyAndNotNull("contentId")) {
            event.withContentId(krollEvent.getString("contentId"));
        }
        if (krollEvent.containsKeyAndNotNull("contentType")) {
            event.withContentType(krollEvent.getString("contentType"));
        }
        if (krollEvent.containsKeyAndNotNull("date1")) {
            event.withDate1(new Date(Math.round(krollEvent.getDouble("date1"))));
        }
        if (krollEvent.containsKeyAndNotNull("date2")) {
            event.withDate2(new Date(Math.round(krollEvent.getDouble("date2"))));
        }
        if (krollEvent.containsKeyAndNotNull("level")) {
            event.withLevel(krollEvent.getInt("level"));
        }
        if (krollEvent.containsKeyAndNotNull("quantity")) {
            event.withQuantity(krollEvent.getInt("quantity"));
        }
        if (krollEvent.containsKeyAndNotNull("rating")) {
            event.withRating(krollEvent.getDouble("rating"));
        }
        if (krollEvent.containsKeyAndNotNull("searchString")) {
            event.withSearchString(krollEvent.getString("searchString"));
        }
        if (krollEvent.containsKeyAndNotNull("attribute1")) {
            event.withAttribute1(krollEvent.getString("attribute1"));
        }
        if (krollEvent.containsKeyAndNotNull("attribute2")) {
            event.withAttribute2(krollEvent.getString("attribute2"));
        }
        if (krollEvent.containsKeyAndNotNull("attribute3")) {
            event.withAttribute3(krollEvent.getString("attribute3"));
        }
        if (krollEvent.containsKeyAndNotNull("attribute4")) {
            event.withAttribute4(krollEvent.getString("attribute4"));
        }
        if (krollEvent.containsKeyAndNotNull("attribute5")) {
            event.withAttribute5(krollEvent.getString("attribute5"));
        }
        if (krollEvent.containsKeyAndNotNull("receipt") && krollEvent.containsKeyAndNotNull("receiptSignature")) {
            event.withReceipt(krollEvent.getString("receipt"), krollEvent.getString("receiptSignature"));
        }
        if (krollEvent.containsKeyAndNotNull("eventItems")) {
            event.withEventItems(convertToMATEventItems((Object[])krollEvent.get("eventItems")));
        }
        return event;
    }
    
    private List<MATEventItem> convertToMATEventItems(Object[] arrItemMaps) {
        List<MATEventItem> listItems = new ArrayList<MATEventItem>();

        try {
            JSONArray arr = new JSONArray(Arrays.toString(arrItemMaps));

            for (int i = 0; i < arr.length(); i++) {
                JSONObject item = arr.getJSONObject(i);

                String itemName = item.getString("item");
                int quantity = 0;
                double unitPrice = 0;
                double revenue = 0;
                String attribute1 = null;
                String attribute2 = null;
                String attribute3 = null;
                String attribute4 = null;
                String attribute5 = null;

                if (item.has("quantity")) {
                    quantity = item.getInt("quantity");
                }
                if (item.has("unit_price")) {
                    unitPrice = item.getDouble("unit_price");
                }
                if (item.has("revenue")) {
                    revenue = item.getDouble("revenue");
                }

                if (item.has("attribute_sub1")) {
                    attribute1 = item.getString("attribute_sub1");
                }
                if (item.has("attribute_sub2")) {
                    attribute2 = item.getString("attribute_sub2");
                }
                if (item.has("attribute_sub3")) {
                    attribute3 = item.getString("attribute_sub3");
                }
                if (item.has("attribute_sub4")) {
                    attribute4 = item.getString("attribute_sub4");
                }
                if (item.has("attribute_sub5")) {
                    attribute5 = item.getString("attribute_sub5");
                }

                MATEventItem eventItem = new MATEventItem(itemName)
                        .withQuantity(quantity)
                        .withUnitPrice(unitPrice)
                        .withRevenue(revenue)
                        .withAttribute1(attribute1)
                        .withAttribute2(attribute2)
                        .withAttribute3(attribute3)
                        .withAttribute4(attribute4)
                        .withAttribute5(attribute5);
                listItems.add(eventItem);
            }
        } catch (JSONException e) {
            e.printStackTrace();
        }

        return listItems;
    }
}

